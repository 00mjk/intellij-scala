/* The following code was generated by JFlex 1.4.3 on 6/9/20 3:32 PM */

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scala.lang.scaladoc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/9/20 3:32 PM from the specification file
 * <tt>../../scaladoc/lexer/scaladoc.flex</tt>
 */
public class _ScalaDocLexer implements FlexLexer, ScalaDocTokenType, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INNER_CODE_WHITESPACE = 52;
  public static final int PARAM_DOC_DEFINE_TAG_VALUE = 22;
  public static final int CODE_BAD_LINK = 46;
  public static final int COMMENT_DATA = 4;
  public static final int PARAM_DEFINE_TAG_DOC_SPACE = 12;
  public static final int PARAM_DOC_TAG_VALUE = 18;
  public static final int COMMENT_DATA_START = 2;
  public static final int INLINE_LINK_TAG_DOC_SPACE = 30;
  public static final int DOC_TAG_VALUE_IN_PAREN = 24;
  public static final int PARAM_DOC_THROWS_TAG_VALUE = 20;
  public static final int CODE_LINK_INNER = 40;
  public static final int HTTP_LINK_INNER = 44;
  public static final int DOC_TAG_VALUE = 16;
  public static final int INLINE_TAG_NAME = 28;
  public static final int HTTP_LINK_INNER_START = 42;
  public static final int INLINE_LINK_TAG_VALUE = 32;
  public static final int PARAM_TAG_DOC_SPACE = 8;
  public static final int CODE_LINK_INNER_START = 38;
  public static final int DOC_TAG_VALUE_IN_LTGT = 26;
  public static final int PARAM_THROWS_TAG_DOC_SPACE = 10;
  public static final int COMMENT_INNER_CODE = 50;
  public static final int DOC_TAG_VALUE_SPACE = 48;
  public static final int YYINITIAL = 0;
  public static final int PARAM_TAG_SPACE = 14;
  public static final int TAG_DOC_SPACE = 6;
  public static final int INLINE_TAG_DOC_SPACE = 36;
  public static final int INLINE_DOC_TAG_VALUE = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12,  7,  7, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\2\1\7\1\0\1\2\1\1\16\21\4\0\1\2\1\12"+
    "\1\20\1\13\1\34\2\12\1\23\1\37\1\40\1\11\1\12\1\24"+
    "\1\12\1\36\1\10\12\3\1\15\1\0\1\12\1\33\1\12\1\12"+
    "\1\41\32\4\1\26\1\16\1\35\1\14\1\22\1\25\1\46\2\4"+
    "\1\47\1\50\1\51\1\4\1\27\1\43\1\4\1\45\1\42\1\55"+
    "\1\44\1\53\1\31\1\4\1\52\1\32\1\30\2\4\1\54\3\4"+
    "\1\6\1\12\1\5\1\12\6\21\1\17\32\21\2\0\4\4\1\12"+
    "\2\0\1\12\1\4\1\0\1\12\1\21\1\12\1\0\1\12\1\12"+
    "\3\0\1\4\4\0\1\4\5\0\27\4\1\12\37\4\1\12\u01ca\4"+
    "\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\21"+
    "\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\0\24\4\1\0\123\4\1\12\213\4\1\12\5\21\2\0"+
    "\236\4\11\0\46\4\2\0\1\4\7\0\47\4\7\0\1\4\1\0"+
    "\55\21\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0"+
    "\33\4\5\0\3\4\15\0\5\21\1\0\3\12\2\0\1\4\2\0"+
    "\2\12\13\21\5\0\53\4\37\21\4\0\2\4\1\21\143\4\1\0"+
    "\1\4\10\21\1\12\6\21\2\4\2\21\1\12\4\21\2\4\12\21"+
    "\3\4\2\12\1\4\17\0\1\21\1\4\1\21\36\4\33\21\2\0"+
    "\131\4\13\21\1\4\16\0\12\21\41\4\11\21\2\4\1\12\3\0"+
    "\1\4\5\0\26\4\4\21\1\4\11\21\1\4\3\21\1\4\5\21"+
    "\22\0\31\4\3\21\104\0\1\4\1\0\13\4\67\0\33\21\1\0"+
    "\4\21\66\4\3\21\1\4\22\21\1\4\7\21\12\4\2\21\2\0"+
    "\12\21\1\0\7\4\1\0\7\4\1\0\3\21\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0"+
    "\1\21\1\4\7\21\2\0\2\21\2\0\3\21\1\4\10\0\1\21"+
    "\4\0\2\4\1\0\3\4\2\21\2\0\12\21\4\4\6\0\1\12"+
    "\1\4\5\0\3\21\1\0\6\4\4\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\21\1\0"+
    "\5\21\4\0\2\21\2\0\3\21\3\0\1\21\7\0\4\4\1\0"+
    "\1\4\7\0\14\21\3\4\1\21\13\0\3\21\1\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\21\1\4\10\21\1\0\3\21\1\0\3\21\2\0\1\4\17\0"+
    "\2\4\2\21\2\0\12\21\1\0\1\4\17\0\3\21\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\21\1\4\7\21\2\0\2\21\2\0\3\21\10\0\2\21"+
    "\4\0\2\4\1\0\3\4\2\21\2\0\12\21\1\12\1\4\20\0"+
    "\1\21\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4"+
    "\4\0\5\21\3\0\3\21\1\0\4\21\2\0\1\4\6\0\1\21"+
    "\16\0\12\21\3\0\6\12\1\4\1\12\6\0\3\21\1\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4"+
    "\7\21\1\0\3\21\1\0\4\21\7\0\2\21\1\0\2\4\6\0"+
    "\2\4\2\21\2\0\12\21\17\0\1\12\2\0\2\21\1\0\10\4"+
    "\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\21"+
    "\1\4\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\4"+
    "\1\0\2\4\2\21\2\0\12\21\1\0\2\4\17\0\2\21\1\0"+
    "\10\4\1\0\3\4\1\0\51\4\2\0\1\4\7\21\1\0\3\21"+
    "\1\0\4\21\1\4\10\0\1\21\10\0\2\4\2\21\2\0\12\21"+
    "\11\0\1\12\6\4\2\0\2\21\1\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\3\0\1\21\4\0\6\21\1\0"+
    "\1\21\1\0\10\21\22\0\2\21\15\0\60\4\1\21\2\4\7\21"+
    "\4\0\10\4\10\21\1\0\12\21\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\21"+
    "\2\4\6\21\1\0\2\21\1\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\21\2\0\12\21\2\0\4\4\40\0\1\4\3\12\17\0\1\12"+
    "\1\0\3\12\2\21\6\12\12\21\12\0\1\12\1\21\1\12\1\21"+
    "\1\12\1\21\4\0\2\21\10\4\1\0\44\4\4\0\24\21\1\0"+
    "\2\21\5\4\13\21\1\0\44\21\1\0\10\12\1\21\6\12\1\0"+
    "\2\12\5\0\4\12\47\0\53\4\24\21\1\4\12\21\6\0\6\4"+
    "\4\21\4\4\3\21\1\4\3\21\2\4\7\21\3\4\4\21\15\4"+
    "\14\21\1\4\17\21\2\12\46\4\1\0\1\4\5\0\1\4\2\0"+
    "\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0"+
    "\4\4\2\0\103\4\2\0\3\21\40\0\20\4\12\12\6\0\125\4"+
    "\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4"+
    "\17\0\15\4\1\0\4\4\3\21\13\0\22\4\3\21\13\0\22\4"+
    "\2\21\14\0\15\4\1\0\3\4\1\0\2\21\14\0\64\4\40\21"+
    "\3\0\1\4\3\0\2\4\1\21\2\0\12\21\41\0\3\21\2\0"+
    "\12\21\6\0\130\4\10\0\51\4\1\21\1\4\5\0\106\4\12\0"+
    "\35\4\3\0\14\21\4\0\14\21\4\0\1\12\5\0\12\21\36\4"+
    "\2\0\5\4\13\0\54\4\4\0\21\21\7\4\2\21\6\0\12\21"+
    "\4\0\42\12\27\4\5\21\4\0\65\4\12\21\1\0\35\21\2\0"+
    "\13\21\6\0\12\21\15\0\1\4\130\0\5\21\57\4\21\21\7\4"+
    "\4\0\12\21\7\0\12\12\11\21\11\12\3\0\3\21\36\4\15\21"+
    "\2\4\12\21\54\4\16\21\14\0\44\4\24\21\10\0\12\21\3\0"+
    "\3\4\12\21\44\4\122\0\3\21\1\0\25\21\4\4\1\21\4\4"+
    "\3\21\2\4\11\0\300\4\47\21\25\0\4\21\u0116\4\2\0\6\4"+
    "\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4"+
    "\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4"+
    "\5\0\3\4\1\0\7\4\16\0\5\21\30\0\1\20\1\20\5\21"+
    "\20\0\2\4\3\0\1\12\15\0\1\12\1\0\1\4\13\0\5\21"+
    "\5\0\6\21\1\0\1\4\10\0\3\12\2\0\1\4\12\0\3\12"+
    "\3\0\15\4\3\0\33\4\25\0\15\21\4\0\1\21\3\0\14\21"+
    "\17\0\2\12\1\4\4\12\1\4\2\12\12\4\1\12\1\4\2\12"+
    "\1\12\5\4\6\12\1\4\1\12\1\4\1\12\1\4\1\12\4\4"+
    "\1\12\13\4\2\12\4\4\5\12\5\4\1\12\1\12\2\12\1\4"+
    "\1\12\20\0\51\4\7\0\5\12\5\12\2\12\4\12\1\12\2\12"+
    "\1\12\2\12\1\12\7\12\1\12\37\12\2\12\2\12\1\12\1\12"+
    "\1\12\37\12\u010c\12\10\12\4\12\24\12\2\12\7\12\2\0\121\12"+
    "\1\12\36\12\31\12\50\12\6\12\22\12\14\0\47\12\31\0\13\12"+
    "\121\0\116\12\26\0\267\12\1\12\11\12\1\12\66\12\10\12\157\12"+
    "\1\12\220\12\1\0\147\12\54\0\54\12\5\12\2\0\37\12\12\0"+
    "\20\12\u0100\12\203\12\26\0\77\12\4\0\40\12\2\0\u0102\12\60\12"+
    "\25\12\2\12\6\12\3\0\12\12\246\0\57\4\1\0\57\4\1\0"+
    "\205\4\6\12\4\4\3\21\2\4\14\0\46\4\1\0\1\4\5\0"+
    "\1\4\2\0\70\4\7\0\1\4\17\0\1\21\27\4\11\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\40\21\57\0\1\4\120\0\32\12"+
    "\1\0\131\12\14\0\326\12\32\0\14\12\10\0\1\12\3\4\12\0"+
    "\2\12\14\0\1\12\11\4\6\21\1\0\5\4\2\12\5\4\1\0"+
    "\2\12\1\0\126\4\2\0\2\21\2\0\3\4\1\0\132\4\1\0"+
    "\4\4\5\0\51\4\3\0\136\4\1\0\2\12\4\0\12\12\33\4"+
    "\5\0\44\12\14\0\20\4\37\12\13\0\36\12\10\0\1\12\17\0"+
    "\40\12\12\0\47\12\17\0\77\12\1\0\u0100\12\u19b6\4\12\0\100\12"+
    "\u51cd\4\63\0\u048d\4\3\0\67\12\11\0\56\4\2\0\u010d\4\3\0"+
    "\20\4\12\21\2\4\24\0\57\4\1\21\4\0\12\21\1\0\31\4"+
    "\7\0\1\21\120\4\2\21\45\0\11\4\2\0\147\4\2\0\4\4"+
    "\1\0\4\4\14\0\13\4\115\0\12\4\1\21\3\4\1\21\4\4"+
    "\1\21\27\4\5\21\4\12\12\0\2\12\1\4\1\12\6\0\64\4"+
    "\14\0\2\21\62\4\21\21\13\0\12\21\6\0\22\21\6\4\3\0"+
    "\1\4\4\0\12\21\34\4\10\21\2\0\27\4\15\21\14\0\35\4"+
    "\3\0\4\21\57\4\16\21\16\0\1\4\12\21\46\0\51\4\16\21"+
    "\11\0\3\4\1\21\10\4\2\21\2\0\12\21\6\0\27\4\3\12"+
    "\1\4\1\21\4\0\60\4\1\21\1\4\3\21\2\4\2\21\5\4"+
    "\2\21\1\4\1\21\1\4\30\0\3\4\2\0\13\4\5\21\2\0"+
    "\3\4\2\21\12\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4"+
    "\1\0\7\4\221\0\43\4\10\21\1\0\2\21\2\0\12\21\6\0"+
    "\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0"+
    "\7\4\14\0\5\4\5\0\1\4\1\21\12\4\1\12\15\4\1\0"+
    "\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0"+
    "\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\1\12\2\0\20\21"+
    "\20\0\7\21\14\0\2\4\30\0\3\4\22\0\1\12\1\0\3\12"+
    "\2\0\1\4\6\0\5\4\1\0\207\4\2\0\1\21\4\0\1\4"+
    "\6\0\1\12\4\0\12\21\2\0\3\12\2\0\32\4\4\0\1\4"+
    "\1\0\32\4\1\0\1\12\1\0\1\12\7\0\131\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\1\12\1\0"+
    "\1\12\2\4\1\0\1\12\4\12\2\12\12\0\3\21\2\12\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\3\1\1\2\1\3\3\2\1\4\3\2\1\5"+
    "\1\2\1\6\3\2\1\7\1\10\1\11\2\1\1\12"+
    "\1\13\1\14\1\15\1\16\2\15\1\17\1\20\1\21"+
    "\1\22\4\23\1\1\4\24\1\1\1\25\1\23\1\15"+
    "\1\26\1\1\1\27\1\30\1\31\4\32\1\1\3\7"+
    "\1\33\1\34\4\35\2\1\1\36\1\37\1\40\2\37"+
    "\1\36\3\41\2\42\1\43\1\44\2\0\1\43\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\4\53\1\23"+
    "\1\43\1\44\2\0\1\23\1\24\1\54\1\43\1\44"+
    "\2\0\1\24\1\0\1\23\2\55\1\32\1\43\1\44"+
    "\2\0\1\32\1\43\1\44\1\35\1\43\1\44\2\0"+
    "\1\35\1\43\1\44\1\0\1\56\1\57\1\60\1\43"+
    "\1\61\2\0\1\51\3\53\1\43\1\23\1\43\1\24"+
    "\1\55\1\43\1\32\2\43\1\35\1\43\1\62\2\0"+
    "\3\53\1\54\1\55\2\0\3\53\1\63\1\64\1\0"+
    "\1\53\1\65\1\53\1\55\1\66\1\0\1\67\1\70"+
    "\3\55\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u047e\0\u04ac\0\u04da\0\u047e\0\u0508\0\u0536"+
    "\0\u0564\0\u04da\0\u047e\0\u0592\0\u05c0\0\u05ee\0\u047e\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u0564"+
    "\0\u061c\0\u078c\0\u07ba\0\u07e8\0\u047e\0\u0816\0\u0564\0\u04da"+
    "\0\u0844\0\u047e\0\u047e\0\u047e\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u047e\0\u0a3e"+
    "\0\u0a6c\0\u047e\0\u0a9a\0\u0ac8\0\u047e\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u06a6\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u047e\0\u0564\0\u04da\0\u047e"+
    "\0\u0eea\0\u0f18\0\u047e\0\u0f46\0\u0f74\0\u0fa2\0\u047e\0\u0fd0"+
    "\0\u047e\0\u0ffe\0\u102c\0\u105a\0\u047e\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u08fc\0\u092a\0\u119c\0\u047e\0\u11ca"+
    "\0\u047e\0\u11f8\0\u09e2\0\u0a10\0\u1226\0\u1254\0\u0a6c\0\u0a6c"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u0bae\0\u0bdc\0\u133a\0\u047e"+
    "\0\u1368\0\u0c0a\0\u1396\0\u13c4\0\u0d7a\0\u0da8\0\u13f2\0\u047e"+
    "\0\u1420\0\u0e04\0\u144e\0\u047e\0\u047e\0\u0f74\0\u047e\0\u147c"+
    "\0\u0ffe\0\u14aa\0\u105a\0\u14d8\0\u1506\0\u1534\0\u08fc\0\u092a"+
    "\0\u09e2\0\u1562\0\u1590\0\u0bae\0\u0bdc\0\u0c0a\0\u0d7a\0\u0da8"+
    "\0\u0e04\0\u047e\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u0a10"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u047e"+
    "\0\u17e6\0\u1814\0\u1088\0\u1842\0\u1870\0\u047e\0\u189e\0\u1088"+
    "\0\u1088\0\u18cc\0\u18fa\0\u1928\0\u1282";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\33\1\34\1\35\44\33\1\36\2\37\3\36\1\40"+
    "\1\37\1\41\1\42\2\36\1\43\5\36\1\44\1\45"+
    "\1\46\1\47\1\50\4\36\1\51\1\52\1\53\3\36"+
    "\1\54\15\36\1\37\1\55\3\36\1\40\1\37\1\41"+
    "\1\42\2\36\1\43\5\36\1\44\1\45\1\46\1\47"+
    "\1\50\4\36\1\56\1\52\1\53\20\36\1\33\2\57"+
    "\4\33\1\57\1\60\1\35\14\33\1\61\30\33\1\62"+
    "\1\63\4\33\1\62\1\60\1\35\45\33\1\62\1\64"+
    "\4\33\1\62\1\60\1\35\44\33\2\65\1\66\5\65"+
    "\1\67\1\70\44\65\10\33\1\60\1\35\44\33\1\36"+
    "\2\62\2\71\2\36\1\62\1\41\1\42\1\36\1\72"+
    "\6\36\1\71\1\36\1\73\1\36\5\71\1\36\3\71"+
    "\1\74\2\36\14\71\4\33\1\75\3\33\1\76\1\77"+
    "\5\100\3\33\1\75\2\33\1\101\1\33\4\75\1\100"+
    "\1\75\4\33\1\100\14\75\4\33\1\102\3\33\1\103"+
    "\1\104\5\105\3\33\1\102\2\33\1\106\1\33\4\102"+
    "\1\105\1\102\1\33\1\107\2\33\1\105\14\102\3\65"+
    "\2\110\1\65\1\111\1\65\1\67\1\70\10\65\1\110"+
    "\4\65\4\110\1\65\1\110\5\65\14\110\1\33\2\37"+
    "\2\71\2\33\1\37\1\60\1\35\10\33\1\71\1\33"+
    "\1\73\1\33\5\71\1\33\3\71\1\33\1\112\1\33"+
    "\14\71\10\33\1\60\1\35\27\33\1\113\16\33\1\114"+
    "\2\33\1\115\2\33\1\60\1\35\45\33\2\116\1\33"+
    "\1\117\1\115\1\33\1\116\1\120\1\121\5\122\3\33"+
    "\1\117\2\33\1\123\1\33\4\117\1\122\1\117\1\33"+
    "\1\107\2\33\1\122\14\117\5\124\1\115\2\124\1\125"+
    "\1\126\44\124\1\33\2\127\2\33\1\115\1\33\1\127"+
    "\1\60\1\35\46\33\1\130\1\33\1\131\3\33\1\132"+
    "\1\133\5\134\3\33\1\131\2\33\1\135\1\33\4\131"+
    "\1\134\1\131\1\136\3\33\1\134\14\131\2\33\1\137"+
    "\1\33\1\131\3\33\1\132\1\133\5\134\3\33\1\131"+
    "\2\33\1\135\1\33\4\131\1\134\1\131\1\136\1\107"+
    "\2\33\1\134\14\131\1\140\1\33\1\141\4\140\1\33"+
    "\1\142\1\143\23\140\1\136\21\140\1\33\1\137\4\140"+
    "\1\33\1\142\1\143\23\140\1\136\20\140\1\33\1\144"+
    "\5\33\1\144\1\60\1\35\23\33\1\136\20\33\1\145"+
    "\2\62\4\145\1\62\1\146\1\147\44\145\1\150\1\37"+
    "\3\150\1\151\1\150\1\37\46\150\67\0\1\152\54\0"+
    "\1\153\46\0\2\37\4\0\1\37\54\0\1\154\32\0"+
    "\1\155\25\0\1\156\66\0\1\157\56\0\1\160\56\0"+
    "\1\161\57\0\1\162\62\0\1\51\25\0\2\163\1\0"+
    "\1\164\13\0\1\163\4\0\4\163\1\0\1\163\5\0"+
    "\14\163\35\0\1\165\20\0\1\166\2\0\2\166\1\0"+
    "\1\166\1\0\20\166\1\167\1\170\15\166\1\171\6\166"+
    "\2\0\1\55\106\0\1\56\23\0\2\57\4\0\1\57"+
    "\47\0\2\62\4\0\1\62\47\0\1\62\1\63\4\0"+
    "\1\62\47\0\1\62\1\64\4\0\1\62\50\0\1\66"+
    "\56\0\2\71\15\0\1\71\3\0\5\71\1\0\3\71"+
    "\3\0\14\71\3\0\2\75\12\0\1\75\1\0\1\75"+
    "\1\172\4\0\4\75\1\0\1\75\5\0\14\75\10\0"+
    "\1\100\1\173\5\100\14\0\1\100\5\0\1\100\24\0"+
    "\1\174\6\100\14\0\1\100\5\0\1\100\24\0\7\100"+
    "\14\0\1\100\5\0\1\100\14\0\1\175\1\0\5\175"+
    "\1\0\6\175\1\176\2\0\4\175\1\177\30\175\3\0"+
    "\2\102\12\0\1\102\1\0\1\102\1\200\4\0\4\102"+
    "\1\0\1\102\1\0\1\201\3\0\14\102\10\0\1\105"+
    "\1\202\5\105\14\0\1\105\2\0\1\201\2\0\1\105"+
    "\24\0\1\203\6\105\14\0\1\105\2\0\1\201\2\0"+
    "\1\105\24\0\7\105\14\0\1\105\2\0\1\201\2\0"+
    "\1\105\14\0\1\204\1\0\5\204\1\0\6\204\1\205"+
    "\2\0\4\204\1\206\30\204\3\0\2\110\15\0\1\110"+
    "\4\0\4\110\1\0\1\110\5\0\14\110\5\207\1\210"+
    "\1\207\1\0\46\207\1\211\2\0\2\211\1\0\1\211"+
    "\1\0\32\211\1\212\13\211\2\0\1\114\54\0\2\116"+
    "\4\0\1\116\51\0\2\117\12\0\1\117\1\0\1\117"+
    "\1\213\4\0\4\117\1\0\1\117\5\0\14\117\10\0"+
    "\1\122\1\214\5\122\14\0\1\122\5\0\1\122\24\0"+
    "\1\215\6\122\14\0\1\122\5\0\1\122\24\0\7\122"+
    "\14\0\1\122\5\0\1\122\14\0\1\216\1\0\5\216"+
    "\1\0\6\216\1\217\2\0\4\216\1\220\30\216\5\124"+
    "\1\0\55\124\1\0\3\124\1\221\51\124\1\0\2\124"+
    "\1\222\45\124\1\0\2\127\4\0\1\127\50\0\1\130"+
    "\56\0\2\131\12\0\1\131\1\0\1\131\1\223\4\0"+
    "\4\131\1\0\1\131\5\0\14\131\10\0\1\134\1\224"+
    "\5\134\14\0\1\134\5\0\1\134\24\0\1\225\6\134"+
    "\14\0\1\134\5\0\1\134\24\0\7\134\14\0\1\134"+
    "\5\0\1\134\14\0\1\226\1\0\5\226\1\0\6\226"+
    "\1\227\2\0\4\226\1\230\30\226\2\0\1\137\53\0"+
    "\1\140\2\0\4\140\1\0\25\140\1\0\20\140\2\0"+
    "\1\141\53\0\1\140\2\0\4\140\1\0\1\140\1\231"+
    "\23\140\1\0\21\140\2\0\4\140\1\0\1\232\24\140"+
    "\1\0\20\140\1\0\2\144\4\0\1\144\53\0\1\233"+
    "\61\0\1\234\52\0\1\235\47\0\1\236\2\0\2\236"+
    "\1\0\1\236\1\0\46\236\11\0\1\237\67\0\1\240"+
    "\34\0\1\241\24\0\1\242\31\0\2\163\15\0\1\163"+
    "\4\0\4\163\1\0\1\163\5\0\14\163\5\164\1\243"+
    "\1\164\1\0\46\164\1\166\2\0\2\166\1\0\1\166"+
    "\1\0\47\166\2\0\2\166\1\0\1\166\1\0\17\166"+
    "\1\244\1\166\1\170\25\166\2\0\2\166\1\0\1\166"+
    "\1\0\36\166\1\245\10\166\2\0\2\166\1\0\1\166"+
    "\1\0\40\166\1\246\5\166\3\0\2\75\3\0\7\100"+
    "\1\75\1\0\1\75\1\172\4\0\4\75\1\100\1\75"+
    "\4\0\1\100\14\75\10\0\1\100\1\247\5\100\14\0"+
    "\1\100\5\0\1\100\14\0\1\175\1\0\5\175\1\0"+
    "\6\175\1\176\6\175\1\250\30\175\3\0\2\102\3\0"+
    "\7\105\1\102\1\0\1\102\1\200\4\0\4\102\1\105"+
    "\1\102\1\0\1\201\2\0\1\105\14\102\10\0\1\105"+
    "\1\251\5\105\14\0\1\105\2\0\1\201\2\0\1\105"+
    "\14\0\1\204\1\0\5\204\1\0\6\204\1\205\6\204"+
    "\1\252\30\204\36\0\1\201\17\0\1\211\2\0\2\211"+
    "\1\0\1\211\1\0\47\211\2\0\2\211\1\0\1\211"+
    "\1\0\33\211\1\253\12\211\3\0\2\117\3\0\7\122"+
    "\1\117\1\0\1\117\1\213\4\0\4\117\1\122\1\117"+
    "\4\0\1\122\14\117\10\0\1\122\1\254\5\122\14\0"+
    "\1\122\5\0\1\122\14\0\1\216\1\0\5\216\1\0"+
    "\6\216\1\217\6\216\1\255\30\216\5\124\1\0\3\124"+
    "\1\256\44\124\3\0\2\131\3\0\7\134\1\131\1\0"+
    "\1\131\1\223\4\0\4\131\1\134\1\131\4\0\1\134"+
    "\14\131\10\0\1\134\1\257\5\134\14\0\1\134\5\0"+
    "\1\134\14\0\1\226\1\0\5\226\1\0\6\226\1\227"+
    "\6\226\1\260\30\226\1\140\2\0\4\140\1\0\1\140"+
    "\1\261\23\140\1\0\20\140\5\0\1\262\73\0\1\263"+
    "\62\0\1\264\25\0\1\166\2\0\2\166\1\0\1\166"+
    "\1\0\42\166\1\265\4\166\2\0\2\166\1\0\1\166"+
    "\1\0\42\166\1\266\4\166\2\0\2\166\1\0\1\166"+
    "\1\0\41\166\1\267\4\166\1\204\1\0\5\204\1\0"+
    "\6\204\1\205\2\0\4\204\1\206\10\204\1\270\17\204"+
    "\1\211\2\0\2\211\1\0\1\211\1\0\34\211\1\271"+
    "\11\211\23\0\1\272\62\0\1\273\25\0\1\166\2\0"+
    "\2\166\1\0\1\166\1\0\43\166\1\274\3\166\2\0"+
    "\2\166\1\0\1\166\1\0\36\166\1\275\10\166\2\0"+
    "\2\166\1\0\1\166\1\0\33\166\1\276\12\166\1\211"+
    "\2\0\2\211\1\0\1\211\1\0\35\211\1\277\10\211"+
    "\23\300\1\0\32\300\31\0\1\301\24\0\1\166\2\0"+
    "\2\166\1\0\1\166\1\0\44\166\1\302\2\166\2\0"+
    "\2\166\1\0\1\166\1\0\45\166\1\303\1\166\2\0"+
    "\2\166\1\0\1\166\1\0\34\166\1\304\11\166\1\211"+
    "\2\0\2\211\1\0\1\211\1\0\21\211\1\305\24\211"+
    "\15\0\1\306\14\0\1\307\23\0\1\166\2\0\2\166"+
    "\1\0\1\166\1\0\22\166\1\310\24\166\2\0\2\166"+
    "\1\0\1\166\1\0\40\166\1\311\5\166\1\211\2\0"+
    "\2\211\1\0\1\211\1\0\32\211\1\312\13\211\15\0"+
    "\1\306\40\0\1\211\2\0\2\211\1\0\1\211\1\0"+
    "\36\211\1\313\10\211\2\0\2\211\1\0\1\211\1\0"+
    "\33\211\1\314\13\211\2\0\2\211\1\0\1\211\1\0"+
    "\34\211\1\315\11\211";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6486];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\1\10\1\11\2\1\1\11\4\1\1\11\3\1"+
    "\1\11\15\1\1\11\4\1\3\11\12\1\1\11\2\1"+
    "\1\11\2\1\1\11\27\1\1\11\2\1\1\11\2\1"+
    "\1\11\2\0\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\11\7\1\2\0\1\11\1\1\1\11\2\1\2\0"+
    "\1\1\1\0\6\1\2\0\1\11\5\1\2\0\1\11"+
    "\2\1\1\0\2\11\1\1\1\11\1\1\2\0\17\1"+
    "\1\11\2\0\5\1\2\0\4\1\1\11\1\0\4\1"+
    "\1\11\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private boolean isOddItalicBold = false;;
  private int braceCount = 0;

  public _ScalaDocLexer() {
    this((java.io.Reader)null);
  }

  public boolean checkAhead(char c) {
     if (zzMarkedPos >= zzBuffer.length()) return false;
     return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }



  public _ScalaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaDocLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2600) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { yybegin(INLINE_LINK_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 57: break;
        case 37: 
          { return DOC_UNDERLINE_TAG;
          }
        case 58: break;
        case 31: 
          { yybegin(HTTP_LINK_INNER);
  return DOC_HTTP_LINK_VALUE;
          }
        case 59: break;
        case 19: 
          { yybegin(DOC_TAG_VALUE_SPACE); return DOC_TAG_VALUE_TOKEN;
          }
        case 60: break;
        case 1: 
          { return DOC_COMMENT_BAD_CHARACTER;
          }
        case 61: break;
        case 35: 
          { braceCount++;
  yybegin(COMMENT_DATA);
  return DOC_COMMENT_DATA;
          }
        case 62: break;
        case 32: 
          { yybegin(HTTP_LINK_INNER);
  return DOC_WHITESPACE;
          }
        case 63: break;
        case 11: 
          { yybegin(PARAM_DOC_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 64: break;
        case 21: 
          { return tDOT;
          }
        case 65: break;
        case 7: 
          { return DOC_COMMENT_DATA;
          }
        case 66: break;
        case 40: 
          { yybegin(CODE_LINK_INNER_START);
  return DOC_LINK_TAG;
          }
        case 67: break;
        case 48: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(INLINE_TAG_NAME);
  return DOC_INLINE_TAG_START;
          }
        case 68: break;
        case 52: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { if (isOddItalicBold) {
    isOddItalicBold = false;
    yypushback(1);
    return DOC_ITALIC_TAG;
  }
  isOddItalicBold = true;
  return DOC_BOLD_TAG;
          }
        case 69: break;
        case 38: 
          { return DOC_ITALIC_TAG;
          }
        case 70: break;
        case 29: 
          { yybegin(CODE_LINK_INNER);
  return tIDENTIFIER;
          }
        case 71: break;
        case 42: 
          { yybegin(COMMENT_DATA);
  return DOC_LINK_CLOSE_TAG;
          }
        case 72: break;
        case 12: 
          { yybegin(PARAM_DOC_THROWS_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 73: break;
        case 45: 
          { yybegin(INLINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 74: break;
        case 50: 
          { yybegin(COMMENT_DATA);
  return DOC_INNER_CLOSE_CODE_TAG;
          }
        case 75: break;
        case 46: 
          { braceCount++;
  yybegin(COMMENT_DATA_START);
  return DOC_COMMENT_START;
          }
        case 76: break;
        case 41: 
          { return DOC_MACROS;
          }
        case 77: break;
        case 15: 
          { return DOC_TAG_VALUE_TOKEN;
          }
        case 78: break;
        case 14: 
          { yybegin(PARAM_DOC_DEFINE_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 79: break;
        case 16: 
          { return DOC_TAG_VALUE_SHARP_TOKEN;
          }
        case 80: break;
        case 24: 
          { yybegin(COMMENT_DATA);
  return DOC_INLINE_TAG_END;
          }
        case 81: break;
        case 28: 
          { yybegin(CODE_LINK_INNER);
  return DOC_WHITESPACE;
          }
        case 82: break;
        case 33: 
          { yybegin(COMMENT_DATA); return DOC_COMMENT_DATA;
          }
        case 83: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(HTTP_LINK_INNER_START);
  return DOC_HTTP_LINK_TAG;
          }
        case 84: break;
        case 6: 
          { return VALID_DOC_HEADER;
          }
        case 85: break;
        case 30: 
          { yybegin(COMMENT_DATA);
  return DOC_WHITESPACE;
          }
        case 86: break;
        case 9: 
          { yybegin(COMMENT_DATA);
   return DOC_WHITESPACE;
          }
        case 87: break;
        case 27: 
          { yybegin(INLINE_DOC_TAG_VALUE);return DOC_WHITESPACE;
          }
        case 88: break;
        case 23: 
          { yybegin(INLINE_LINK_TAG_VALUE); return DOC_WHITESPACE;
          }
        case 89: break;
        case 13: 
          { yypushback(1);
  yybegin(COMMENT_DATA);
          }
        case 90: break;
        case 34: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE;
          }
        case 91: break;
        case 55: 
          { yybegin(PARAM_THROWS_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 92: break;
        case 44: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return tIDENTIFIER;
          }
        case 93: break;
        case 26: 
          { return tIDENTIFIER;
          }
        case 94: break;
        case 56: 
          { yybegin(PARAM_DEFINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 95: break;
        case 39: 
          { return DOC_SUBSCRIPT_TAG;
          }
        case 96: break;
        case 8: 
          { return DOC_HEADER;
          }
        case 97: break;
        case 18: 
          { yybegin(DOC_TAG_VALUE_IN_PAREN); return DOC_TAG_VALUE_LPAREN;
          }
        case 98: break;
        case 17: 
          { return DOC_TAG_VALUE_COMMA;
          }
        case 99: break;
        case 47: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE_TAG;
          }
        case 100: break;
        case 49: 
          { return DOC_BOLD_TAG;
          }
        case 101: break;
        case 20: 
          { yybegin(DOC_TAG_VALUE_SPACE);
  return tIDENTIFIER;
          }
        case 102: break;
        case 43: 
          { yybegin(TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 103: break;
        case 53: 
          { yybegin(PARAM_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 104: break;
        case 10: 
          { yybegin(COMMENT_DATA); return DOC_WHITESPACE;
          }
        case 105: break;
        case 4: 
          { return DOC_SUPERSCRIPT_TAG;
          }
        case 106: break;
        case 3: 
          { return DOC_WHITESPACE;
          }
        case 107: break;
        case 2: 
          { yybegin(COMMENT_DATA);
  return DOC_COMMENT_DATA;
          }
        case 108: break;
        case 5: 
          { return DOC_MONOSPACE_TAG;
          }
        case 109: break;
        case 25: 
          { yybegin(INLINE_DOC_TAG_VALUE); return DOC_WHITESPACE;
          }
        case 110: break;
        case 22: 
          { yybegin(DOC_TAG_VALUE); return DOC_TAG_VALUE_RPAREN;
          }
        case 111: break;
        case 36: 
          { braceCount--;
  if (braceCount == 0) {
    return DOC_COMMENT_END;
  }
  else {
    yybegin(COMMENT_DATA);
    return DOC_COMMENT_DATA;
  }
          }
        case 112: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
