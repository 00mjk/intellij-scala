package org.jetbrains.sbt.project.template.activator;

import com.intellij.icons.AllIcons;
import com.intellij.ui.ScrollPaneFactory;
import com.intellij.ui.speedSearch.ListWithFilter;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.Function;
import org.jetbrains.plugins.scala.annotator.createFromUsage.Object;
import scala.Tuple2;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;

/**
 * User: Dmitry.Naydanov
 * Date: 29.01.15.
 */
public class ActivatorTemplateList {
  private JPanel mainPanel;
  private JList list1;
  private JTextArea textArea1;
  private JPanel listPanel;
  private JLabel myWarningLabel;

  private TemplateListModel templateListModel;

  public ActivatorTemplateList(Tuple2<String, ActivatorRepoProcessor.DocData>[] items) {
    list1 = new JList();
    templateListModel = new TemplateListModel(items);
    $$$setupUI$$$();
    list1.setModel(templateListModel);

    JComponent filterList = ListWithFilter.wrap(list1, ScrollPaneFactory.createScrollPane(list1), new Function<java.lang.Object, String>() {
      @Override
      public String fun(java.lang.Object o) {
        return o == null ? "" : o.toString();
      }
    });
    listPanel.add(filterList,
        new GridConstraints(0, 0, 1, 1,
            GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

    list1.setAutoscrolls(true);

    textArea1.setLineWrap(true);
    textArea1.setWrapStyleWord(true);
    textArea1.setAutoscrolls(false);

    list1.addListSelectionListener(new ListSelectionListener() {
      @Override
      public void valueChanged(ListSelectionEvent listSelectionEvent) {
        String id = getSelectedTemplateId();
        if (id != null) textArea1.setText(assemblyText(id));
      }
    });
  }

  public JPanel getMainPanel() {
    return mainPanel;
  }

  public String getSelectedTemplate() {
    return getSelectedTemplateId();
  }

  private String getSelectedTemplateId() {
    java.lang.Object val = list1.getSelectedValue();

    if (!(val instanceof TemplateListModel.FullTemplateData)) return null;
    return ((TemplateListModel.FullTemplateData) val).id();
  }

  private String assemblyText(String id) {
    return templateListModel.getDescriptionAt(id) + "\n\n" +
        "Author: " + templateListModel.getAuthorAt(id) + "\n\n" +
        "Source: " + templateListModel.getSourceAt(id) + "\n\n" +
        "Tags: " + templateListModel.getTagsAt(id);
  }

  private void createUIComponents() {
    myWarningLabel = new JLabel("Some templates may require Typesafe subscription\nor have other requirements",
        AllIcons.General.Warning, SwingUtilities.LEADING);
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    mainPanel = new JPanel();
    mainPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
    final JSeparator separator1 = new JSeparator();
    mainPanel.add(separator1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Description");
    mainPanel.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JScrollPane scrollPane1 = new JScrollPane();
    mainPanel.add(scrollPane1, new GridConstraints(1, 1, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    textArea1 = new JTextArea();
    scrollPane1.setViewportView(textArea1);
    listPanel = new JPanel();
    listPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    mainPanel.add(listPanel, new GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    myWarningLabel.setText("Some templates may require Typesafe subscription or have another requirements");
    mainPanel.add(myWarningLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return mainPanel;
  }
}
