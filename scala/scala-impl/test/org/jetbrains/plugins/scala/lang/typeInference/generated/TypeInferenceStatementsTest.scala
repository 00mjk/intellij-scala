package org.jetbrains.plugins.scala.lang.typeInference
package generated

class TypeInferenceStatementsTest extends TypeInferenceTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "statements/"

  def testAssignStatement() {doTest()}

  def testAssignWithFunction() {doTest()}

  def testForFilter() {doTest()}

  def testForStatementWithGuard() {doTest()}

  def testForStatementWithGuard2() {doTest()}

  def testIfStatement() {doTest()}

  def testImportedParameterizedType() {doTest()}

  def testIncompleteForStatement() {doTest()}

  def testInfix() {doTest()}

  def testMatchStatement() {doTest()}

  def testOptionLub() {doTest()}

  def testOverridingCheck() {doTest()}

  def testThisStmt() {doTest()}

  def testTryStatement() {doTest()}

  def testUnitIfStatement() {doTest()}

  def testWhileStatement() {doTest()}

  def testSCL8580(): Unit = {
    doTest(
      s"""case class Filterable(s: List[String]) {
         |  def withFilter(p: List[String] => Boolean) = Monadic(s)
         |}
         |
         |case class Monadic(s: List[String]) {
         |  def map(f: List[String] => List[String]): Monadic = Monadic(f(s))
         |  def flatMap(f: List[String] => Monadic): Monadic = f(s)
         |  def foreach(f: List[String] => Unit): Unit = f(s)
         |  def withFilter(q: List[String] => Boolean): Monadic = this
         |}
         |
         |val filterable = Filterable(List("aaa"))
         |
         |${START}for (List(s) <- filterable) yield List(s, s)$END
         |
         |//Monadic""".stripMargin)
  }

}